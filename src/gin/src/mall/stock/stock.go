// Autogenerated by Thrift Compiler (0.12.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package stock

import (
	"bytes"
	"context"
	"reflect"
	"database/sql/driver"
	"errors"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

//You can define enums, which are just 32 bit integers. Values are optional
//and start at 1 if not supplied, C style again.
type Operation int64
const (
  Operation_ADD Operation = 1
  Operation_SUBTRACT Operation = 2
)

func (p Operation) String() string {
  switch p {
  case Operation_ADD: return "ADD"
  case Operation_SUBTRACT: return "SUBTRACT"
  }
  return "<UNSET>"
}

func OperationFromString(s string) (Operation, error) {
  switch s {
  case "ADD": return Operation_ADD, nil 
  case "SUBTRACT": return Operation_SUBTRACT, nil 
  }
  return Operation(0), fmt.Errorf("not a valid Operation string")
}


func OperationPtr(v Operation) *Operation { return &v }

func (p Operation) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *Operation) UnmarshalText(text []byte) error {
q, err := OperationFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *Operation) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = Operation(v)
return nil
}

func (p * Operation) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
//Thrift lets you do typedefs to get pretty names for your types. Standard
//C style here.
type Int int32

func IntPtr(v Int) *Int { return &v }

// Attributes:
//  - GoodsId
//  - Num2
//  - Op
//  - RequestTime
//  - Comment
type StockRequest struct {
  GoodsId Int `thrift:"goodsId,1" db:"goodsId" json:"goodsId"`
  Num2 Int `thrift:"num2,2" db:"num2" json:"num2"`
  Op Operation `thrift:"op,3" db:"op" json:"op"`
  RequestTime *string `thrift:"requestTime,4" db:"requestTime" json:"requestTime,omitempty"`
  Comment *string `thrift:"comment,5" db:"comment" json:"comment,omitempty"`
}

func NewStockRequest() *StockRequest {
  return &StockRequest{}
}


func (p *StockRequest) GetGoodsId() Int {
  return p.GoodsId
}

func (p *StockRequest) GetNum2() Int {
  return p.Num2
}

func (p *StockRequest) GetOp() Operation {
  return p.Op
}
var StockRequest_RequestTime_DEFAULT string
func (p *StockRequest) GetRequestTime() string {
  if !p.IsSetRequestTime() {
    return StockRequest_RequestTime_DEFAULT
  }
return *p.RequestTime
}
var StockRequest_Comment_DEFAULT string
func (p *StockRequest) GetComment() string {
  if !p.IsSetComment() {
    return StockRequest_Comment_DEFAULT
  }
return *p.Comment
}
func (p *StockRequest) IsSetRequestTime() bool {
  return p.RequestTime != nil
}

func (p *StockRequest) IsSetComment() bool {
  return p.Comment != nil
}

func (p *StockRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StockRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Int(v)
  p.GoodsId = temp
}
  return nil
}

func (p *StockRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := Int(v)
  p.Num2 = temp
}
  return nil
}

func (p *StockRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := Operation(v)
  p.Op = temp
}
  return nil
}

func (p *StockRequest)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.RequestTime = &v
}
  return nil
}

func (p *StockRequest)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Comment = &v
}
  return nil
}

func (p *StockRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("StockRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StockRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("goodsId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:goodsId: ", p), err) }
  if err := oprot.WriteI32(int32(p.GoodsId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.goodsId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:goodsId: ", p), err) }
  return err
}

func (p *StockRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("num2", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:num2: ", p), err) }
  if err := oprot.WriteI32(int32(p.Num2)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.num2 (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:num2: ", p), err) }
  return err
}

func (p *StockRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("op", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:op: ", p), err) }
  if err := oprot.WriteI32(int32(p.Op)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.op (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:op: ", p), err) }
  return err
}

func (p *StockRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestTime() {
    if err := oprot.WriteFieldBegin("requestTime", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:requestTime: ", p), err) }
    if err := oprot.WriteString(string(*p.RequestTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.requestTime (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:requestTime: ", p), err) }
  }
  return err
}

func (p *StockRequest) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetComment() {
    if err := oprot.WriteFieldBegin("comment", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:comment: ", p), err) }
    if err := oprot.WriteString(string(*p.Comment)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.comment (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:comment: ", p), err) }
  }
  return err
}

func (p *StockRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StockRequest(%+v)", *p)
}

// Structs can also be exceptions, if they are nasty.
// 
// Attributes:
//  - WhatOp
//  - Why
type InvalidOperation struct {
  WhatOp int32 `thrift:"whatOp,1" db:"whatOp" json:"whatOp"`
  Why string `thrift:"why,2" db:"why" json:"why"`
}

func NewInvalidOperation() *InvalidOperation {
  return &InvalidOperation{}
}


func (p *InvalidOperation) GetWhatOp() int32 {
  return p.WhatOp
}

func (p *InvalidOperation) GetWhy() string {
  return p.Why
}
func (p *InvalidOperation) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *InvalidOperation)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.WhatOp = v
}
  return nil
}

func (p *InvalidOperation)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Why = v
}
  return nil
}

func (p *InvalidOperation) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("InvalidOperation"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *InvalidOperation) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("whatOp", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:whatOp: ", p), err) }
  if err := oprot.WriteI32(int32(p.WhatOp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.whatOp (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:whatOp: ", p), err) }
  return err
}

func (p *InvalidOperation) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("why", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:why: ", p), err) }
  if err := oprot.WriteString(string(p.Why)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.why (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:why: ", p), err) }
  return err
}

func (p *InvalidOperation) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("InvalidOperation(%+v)", *p)
}

func (p *InvalidOperation) Error() string {
  return p.String()
}

type StockManager interface {  //Ahh, now onto the cool part, defining a service. Services just need a name
  //and can optionally inherit from another service using the extends keyword.

  Ping(ctx context.Context) (err error)
  // Parameters:
  //  - Request
  ChangeStock(ctx context.Context, request *StockRequest) (r bool, err error)
}

//Ahh, now onto the cool part, defining a service. Services just need a name
//and can optionally inherit from another service using the extends keyword.
type StockManagerClient struct {
  c thrift.TClient
}

func NewStockManagerClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *StockManagerClient {
  return &StockManagerClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewStockManagerClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *StockManagerClient {
  return &StockManagerClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewStockManagerClient(c thrift.TClient) *StockManagerClient {
  return &StockManagerClient{
    c: c,
  }
}

func (p *StockManagerClient) Client_() thrift.TClient {
  return p.c
}
func (p *StockManagerClient) Ping(ctx context.Context) (err error) {
  var _args0 StockManagerPingArgs
  var _result1 StockManagerPingResult
  if err = p.Client_().Call(ctx, "ping", &_args0, &_result1); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - Request
func (p *StockManagerClient) ChangeStock(ctx context.Context, request *StockRequest) (r bool, err error) {
  var _args2 StockManagerChangeStockArgs
  _args2.Request = request
  var _result3 StockManagerChangeStockResult
  if err = p.Client_().Call(ctx, "changeStock", &_args2, &_result3); err != nil {
    return
  }
  return _result3.GetSuccess(), nil
}

type StockManagerProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler StockManager
}

func (p *StockManagerProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *StockManagerProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *StockManagerProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewStockManagerProcessor(handler StockManager) *StockManagerProcessor {

  self4 := &StockManagerProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self4.processorMap["ping"] = &stockManagerProcessorPing{handler:handler}
  self4.processorMap["changeStock"] = &stockManagerProcessorChangeStock{handler:handler}
return self4
}

func (p *StockManagerProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x5 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x5.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x5

}

type stockManagerProcessorPing struct {
  handler StockManager
}

func (p *stockManagerProcessorPing) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := StockManagerPingArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("ping", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := StockManagerPingResult{}
  var err2 error
  if err2 = p.handler.Ping(ctx); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ping: " + err2.Error())
    oprot.WriteMessageBegin("ping", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("ping", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type stockManagerProcessorChangeStock struct {
  handler StockManager
}

func (p *stockManagerProcessorChangeStock) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := StockManagerChangeStockArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("changeStock", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := StockManagerChangeStockResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.ChangeStock(ctx, args.Request); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing changeStock: " + err2.Error())
    oprot.WriteMessageBegin("changeStock", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("changeStock", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

type StockManagerPingArgs struct {
}

func NewStockManagerPingArgs() *StockManagerPingArgs {
  return &StockManagerPingArgs{}
}

func (p *StockManagerPingArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StockManagerPingArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ping_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StockManagerPingArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StockManagerPingArgs(%+v)", *p)
}

type StockManagerPingResult struct {
}

func NewStockManagerPingResult() *StockManagerPingResult {
  return &StockManagerPingResult{}
}

func (p *StockManagerPingResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StockManagerPingResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ping_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StockManagerPingResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StockManagerPingResult(%+v)", *p)
}

// Attributes:
//  - Request
type StockManagerChangeStockArgs struct {
  Request *StockRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewStockManagerChangeStockArgs() *StockManagerChangeStockArgs {
  return &StockManagerChangeStockArgs{}
}

var StockManagerChangeStockArgs_Request_DEFAULT *StockRequest
func (p *StockManagerChangeStockArgs) GetRequest() *StockRequest {
  if !p.IsSetRequest() {
    return StockManagerChangeStockArgs_Request_DEFAULT
  }
return p.Request
}
func (p *StockManagerChangeStockArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *StockManagerChangeStockArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StockManagerChangeStockArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &StockRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *StockManagerChangeStockArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("changeStock_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StockManagerChangeStockArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *StockManagerChangeStockArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StockManagerChangeStockArgs(%+v)", *p)
}

// Attributes:
//  - Success
type StockManagerChangeStockResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewStockManagerChangeStockResult() *StockManagerChangeStockResult {
  return &StockManagerChangeStockResult{}
}

var StockManagerChangeStockResult_Success_DEFAULT bool
func (p *StockManagerChangeStockResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return StockManagerChangeStockResult_Success_DEFAULT
  }
return *p.Success
}
func (p *StockManagerChangeStockResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *StockManagerChangeStockResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StockManagerChangeStockResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *StockManagerChangeStockResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("changeStock_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StockManagerChangeStockResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *StockManagerChangeStockResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StockManagerChangeStockResult(%+v)", *p)
}


